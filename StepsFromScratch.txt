1- dotnet new sln
2- dotnet new webapi -o API
3- dotnet sln add API
4- install C# extension
5- install "C# Extensions" work with class better
6- install Material Icon Theme extension
7- To hide bin and obj => preference=>settings=>exclude=> add template **/bin and **/obj
8- Implicit using in project file is to not write using in the files for .Net6.
9- add entities folder to API and add a new class with the name of AppUser
10- Add Nuget Gallery extension to find and install nuget packages easily. 
11- After installing above extension, ctrl+shift+p to show commands. then type nuget and open nuget gallery.
12- install Microsoft.EntityFrameworkCore 
13- install Microsoft.EntityFrameworkCore.SqlServer (Or sqllite it depends on which provider)
14- Add dbcontext. Create a new folder call it Data. Add a new class and call it DataContext.
15- Derive the class from DbContext. 
16- From actions chose constructor with options and add a constructor as below: 
        public DataContext(DbContextOptions options) : base(options)
17- Then we start to add our DbSets.
18- add connection string in appsettings.development.json.
19- inject db context into startup file/ configure services method as below: 
            services.AddDbContext<DataContext>(options=>{
                options.UseSqlServer(_config.GetConnectionString("DefaultConnection"));
            });
20- then install dotnet-ef tool by below command: 
dotnet tool install --global dotnet-ef --version 5.0.17
21-install Microsoft.EntityFrameworkCore.Design from nuget gallery.
22- Now its time to add migration by execute this command in terminal: 
dotnet ef migrations add InitialCreate -o Data/Migrations
23- Then create database with below command: 
dotnet ef database update
24- Add UsersController to Controllers folder. Derive it from ControllerBase and give it below attributes:
    [ApiController]
    [Route("api/[controller]")]
25- make an constructor and inject the db context. 
26- create 2 get methods.
27- make the code async.

********************************* Finish the First part for developing API ***********************************
1- Node should be installed.
2- We install angular version 12 with the below command: 
 npm install -g @angular/cli@12
3-then with  ng --version  we can check the angular version. 
If we have "ng.ps1 is not digitally signed. You cannot run this script on the current system." error,
we should delete ng.ps1 file from C:\Users\Hooman\AppData\Roaming\npm\.
4- we create Angular project with below command: 
ng new client --strict false => routing: yes => styleshit=>CSS
5- The first page showing is from src\index.html
6- The index is using  <app-root> which is in app folder. it is the main component. it uses a HTML and CSS fle.
7- We go to app.component.html and delete all code and just write dating app.
8- We can send data from component to our template. and read it by {{}}
9- Every Angular project has to have a module file. In this file we defined our components. We can import 
other modules as well. 
10- Extensions that help us for Angular: Angular Language Service, Angular Snippets
11- We are going to send a request to our API: 
    In app.module.ts ad the topp ads an import reference to httpclient and then we add it into imports. 
12- Angular uses DI jus as we use in .NET Core.
13- we declare a constructor in app component
14- lifecycle event in Angular is first constructor then initial event. For this we add implements OnInit.
15- Then we implement OnInit interface. 
16- we add getUsers method and by using httpclient we send a request to pur API.
17- We get the CORS blocked error.  ( Cros Origin Resource Sharing)
18- What is CORS? It is a mechianism which block every front-end http request from another origin to API origin. 
19- In the API project, in the startup file, in the ConfigureServices we add AddCors(). Prority is not important.
20-  In the startup/configure method priority is important. Between UseRouting and UseAuthorization: UseCors().
        app.UseCors(policy=>policy.AllowAnyHeader().AllowAnyMethod().WithOrigins("http://localhost:4200"));
21- Then we can use this code to show users in front end: 
    <li *ngFor="let user of users">{{user.id}} - {{user.username}}</li>
22- Variables are case-sensitive and camelcase. so=> userName
23- Adding some stylesheets. We use Angular bootstrap because the normal bootstrap javascript get mess with
    Angular when they want to manipulate the DOM. We use ngx-bootstrap
24- in the client project we run this command: ng add ngx-bootstrap. It will manipulate 3 files. 
          package.json , angular.json , src/app/app.module.ts
25- We want to add font-awsome for icons. npm install font-awesome
26- Add https. First we install the certificate. then in client we add ssl folder. Copy the certificate and key 
in this folder. In Angular.json file in the section serve, in the options we add "sslKey":'./ssl/server.key', 
"sslCert": "./ssl/server.crt", "ssl":true,

************************** End of First step of Angular Front-End App ********************************************
1- we are going to have a look at store password in DB, using inheritance in C# - DRY, using C# debuger,
Data transfer onjects, Validation, json web tokens JWTs, services in C$, Middleware, and extension methods DRY.

2- For hashing password in DB we will use password salt.  Then we weill use ASP.NET Core Identity. 

3- Update class App user with two byte properties password and password salt. 

4- Add the migration into EF by this command: dotnet ef migrations add userpasswordadded
then update the DB by:   dotnet ef database update

5- Becasue we want to not repeat ourself for preparing controller, we created a base controller and then we will use
inheritance.

6- We inheritance UsersController from BaseApiController and removed the attributes from UsersController.
7- We added AccountController.
8-ApiController attribute will bind the input parameters of a method to the sent parameters from request. For example
for Register methof in AccountController. 
9- Describe what is a DTO. 
10-Adding RegisterDto class then use t into Register method.
11- We validate data in DTOs.
12- How we can authenticate with our API? Json Web Tokens ( JWT)
13- Add a folder and add ITokenInterface
14- Create a services folder and add TokenService anf then add this service to startup for DI. 
15- Singlton, Scoped = > when the request is finished the service will dispose. Transient=> Not right for HTTP rquest. 
16- We added interface for testing, for example MockTest. 
17- From Nuget Gallery add System.IdentityModel.Tokens.Jwt
18- developing tokenhandler in token service.
19- Change the return type of registe and login methods in account controller.
20- Add tokenKey configuration to appsetings.development.json.
21- To authorize our methods we add attributes to UsersController.
22- We need to add Microsoft.AspNetCore.Authentication.JwtBearer from Nuget gallery. 
23- Then we need to add Authentication service to our startup file. ( ConfigureServices)
24- Then we need to add middleware. (ordering is important)above app.UseAuthorization=>app.UseAuthentication();
25- The system will work. For sending request by post man we should authorization to header with Bearer. 
26- Add extension methods and clean up our startup file. 

***************************************End of section 4 *************************************************************
1- Creating a navbar using ng command in the src/app folder: ng g c nav --skip-tests
2- create the nav element from bootstrap page and copy it into html
3- add nav-app component to the app.components.html 
4- Angular form and login. Add FormModule into app module
5- Angular provides 2 way binding. We can bind our data from our component and display them in template or
we can data from form and update something in our component.
6- For making a form as Angular form we add #formName="ngForm" and for linking it to a method we use (ngSubmi)="method()"
7- We should give our input a property of name then [(ngModel)]= "" 
* The sqaure bracket [] means we want to receive data from component and () is for sending to component.
8- Add _services folder for our services.
9- we add a service into this folder by command  ng g s account --skip-tests
10- About this service: injectable means we can inject it into other services. services are Singlton. It means when a 
service is created it will remain until user close the browser. 
11- Injecting a service to our component: In constructor we inject it.
12- observable is lazy :) we need to subscribe it.
13- Conditional viewing: *ngIf="loggedIn"
14- for functionality to dropdown we add this to app module : import { BsDropdownModule } from 'ngx-bootstrap/dropdown';
and     BsDropdownModule.forRoot() to appmodule=> imports

15- Observalble: New standard for managing async data included in ES7 (ES2016).
                 Introduced in Angular 2
                 Observable are lazy collections of multiple values over time
                 YOu can think of obseravkes like a newsletter ( You need to subscribe them)

Promise: Provides a single future value, Not lazy, cannot cancel
Observable: Emits mutiple values over time, Lazy, Able to cancel, can use with map, filter, reduce,...

16- RxJS =>  observable.Pipe(map(members=>{console.log(member.id)}))

17- Persist on login: Changes in account service and nav.component and create loal storage variable. 
* Rememebr: | async will automatically unsubscribe if there is not anything.
18- Create a home component: ng g c home --skip-tests
19- Design the Home html. 
20- Create a register component: ng g c register --skip-tests
21- Design the component.
22- Parent to child communication: in the child component we create @Input() variable. then from parent when we want
to call the child we pass the parameter by []=
23- Send data from child to parent:  add to child => @Output() cancelRegister = new EventEmitter();
then call it :     this.cancelRegister.emit(false); then in the parent component with () we can access to this method.
(cancelRegister)="cancelRegisterMode($event)

24- Hooking up the register method to the service

***************************************End of section 5 *************************************************************

Angular routing 

1- Adding more components : member-list, nenber-detail, lists, messages
2- add our route's path in app-routing.module.ts in the const routes: Routes  array. 
3- then we need to add arouter outlet: open app-component.html and replace app-home with router-outlet
4- add routing to our navbar replace href with: routerLink="/messages"
5- to highlit which link is on: if we add class active to the navbar it will show it brighter. We want router to add this
class. we add routerLinkActive="active" to the links. 
6- access router from our component: inject Router into nav bar ts. then redirect in login and logout. 
      this.router.navigateByUrl('/members');

7- Notification: add a package : Toaster 
8- navigate to root folder of ui project (client) and run npm install ngx-toastr@13.0.0 --save
9- add some new styleshit to angular.json: 
              "./node_modules/font-awesome/css/font-awesome.css",
              "./node_modules/ngs-toastr/toastr.css",

10- import toastr module to app.module.ts file as : 
    ToastrModule.forRoot({
      positionClass: 'toast-bottom-right'
    })
11- becasue we chaned our angular.json file we need to restar app. 
12- Inject toastr into nav and register componnet and in error we add toastr.error. 
13- adding angular route guard: inside app folder we ceate a new folder: _guards
14- go into _gurds folder and execute ng g guard auth --skip-tests and then choose CanActivate
15- remove these 2 parameter from auth.guard.ts canActivate function and other type of return instead of Observable: 
    route: ActivatedRouteSnapshot,
    state: RouterStateSnapshot
16- add a constructor and inject account service and toastr.
17- in canActivate we pipe the current user from account service and if the user is null we add toastr message.
18- in app-routinng.module.ts on the paths we add canActivate: [AuthGuard]
19- Now we want to add a dummy route to add routeGuard to all our components. 
20- add a dummy route to app-routing.module.ts as below and cut other paths and paste them as the children:
  {
    path: '',
    runGuardsAndResolvers: 'always',
    canActivate:[AuthGuard],
    children: [
      { path: 'members', component: MemberListComponent, canActivate: [AuthGuard] },
      { path: 'members/:id', component: MemberDetailComponent },
      { path: 'lists', component: ListsComponent },
      { path: 'messages', component: MessagesComponent }
    ]
  },

  21- in the nav html we add ng-container. it will not generate any html. it will be better to put our ngif in it. 

  22- adding a new theme: bootswatch.com free themes. we need to install it. 
  23 we go to root of our project. then we use npm install bootswatch. npm install bootswatch@4.5.2
  24- add               "./node_modules/bootswatch/dist/united/bootstrap.css",
 into angular.json after bootstrap and restart the app.
 25- we changed the bg-dark to bg-primary in nav html and button as well. 
 26- we want to show the correct user insetead of welcom user: in nav component when we add welcom user we do these: 
         <div class="dropdown" *ngIf="(accountService.currentUser$ | async) as user" dropdown>
            <a class="dropdown-toggle text-light" dropdownToggle>Welcome {{user.username| titlecase}}</a>
27- House keeping: we want to keep our app.module.ts file in import section clean.
28- in the app folder we add a folder : _modules and run ng g m shared --flat
29- open the added module and then cut extrta added imports and then paste them into sharedmodules and add imports.
30- then we add sharedmodules in app.module.ts and then export the modules in shared module.   
***************************************End of section 6 *************************************************************



